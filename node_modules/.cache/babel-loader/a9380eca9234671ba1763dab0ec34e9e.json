{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\natha\\\\Desktop\\\\Travail_pi's\\\\travail_pi\\\\src\\\\components\\\\AdminPage\\\\AdminPage.js\";\nimport React from 'react';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport { Redirect } from 'react-router-dom';\nimport Title from '../Title/Title'; // Ajout à faire\n// Rendre plus joli avec Bootstrap\n// NoSql -> créer API pour ça\n// Barre de chargement objectif argent\n// Page d'admin\n// Ajout de contact\n// Page de rappel d'event peut être cool aussi\n// Attendre le logo pour l'ajouter\n\nconst fs = require('fs');\n\nconst readline = require('readline');\n\nconst _require = require('googleapis'),\n      google = _require.google; // If modifying these scopes, delete token.json.\n\n\nconst SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']; // The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\n\nconst TOKEN_PATH = 'token.json'; // Load client secrets from a local file.\n\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err); // Authorize a client with credentials, then call the Gmail API.\n\n  authorize(JSON.parse(content), listLabels);\n});\n/**\r\n * Create an OAuth2 client with the given credentials, and then execute the\r\n * given callback function.\r\n * @param {Object} credentials The authorization client credentials.\r\n * @param {function} callback The callback to call with the authorized client.\r\n */\n\nfunction authorize(credentials, callback) {\n  const _credentials$installe = credentials.installed,\n        client_secret = _credentials$installe.client_secret,\n        client_id = _credentials$installe.client_id,\n        redirect_uris = _credentials$installe.redirect_uris;\n  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]); // Check if we have previously stored a token.\n\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getNewToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n/**\r\n * Get and store new token after prompting for user authorization, and then\r\n * execute the given callback with the authorized OAuth2 client.\r\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\r\n * @param {getEventsCallback} callback The callback for the authorized client.\r\n */\n\n\nfunction getNewToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  rl.question('Enter the code from that page here: ', code => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error retrieving access token', err);\n      oAuth2Client.setCredentials(token); // Store the token to disk for later program executions\n\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), err => {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n/**\r\n * Lists the labels in the user's account.\r\n *\r\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\r\n */\n\n\nfunction listLabels(auth) {\n  const gmail = google.gmail({\n    version: 'v1',\n    auth\n  });\n  gmail.users.labels.list({\n    userId: 'me'\n  }, (err, res) => {\n    if (err) return console.log('The API returned an error: ' + err);\n    const labels = res.data.labels;\n\n    if (labels.length) {\n      console.log('Labels:');\n      labels.forEach(label => {\n        console.log(\"- \".concat(label.name));\n      });\n    } else {\n      console.log('No labels found.');\n    }\n  });\n}\n\nfunction AdminPage() {\n  //Flemme de faire un vrai Hash et de toute façon pas sûr que les scouts sachent hack ça :p\n  var mdp = \"\";\n  mdp = prompt(\"Veuillez indiquer le mot de passe : \");\n  var m = 1187; //Hash de vérif du code\n\n  var c = 0;\n\n  for (var i = 0; i < mdp.length; i++) {\n    c += mdp.charCodeAt(i);\n  }\n\n  if (m !== c) {\n    return React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    class: \"container-fluid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"text-center col-12 mt-4 \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Admin\"))), React.createElement(\"div\", {\n    class: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"text-center col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Link, {\n    class: \"mr-2 btn btn-outline-dark\",\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Leurs heures\"), React.createElement(Link, {\n    class: \"mr-2 btn btn-outline-dark\",\n    to: \"oldJobs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Nos travaux pass\\xE9s\"), React.createElement(Link, {\n    class: \"mr-2 btn btn-outline-dark\",\n    to: \"futureJobs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Nos travaux futurs\"), React.createElement(Link, {\n    class: \"btn btn-outline-dark\",\n    to: \"projet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Nos projets\"))), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Ici il y aura deux trois trucs que les pi's n'ont pas besoin de voir.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Je vais tenter par exemple de mettre en place l'API de Trello pour l'avoir ici, et d'autres choses du genre.\"));\n}\n\nexport default AdminPage;","map":{"version":3,"sources":["C:\\Users\\natha\\Desktop\\Travail_pi's\\travail_pi\\src\\components\\AdminPage\\AdminPage.js"],"names":["React","Route","Link","BrowserRouter","Router","Redirect","Title","fs","require","readline","google","SCOPES","TOKEN_PATH","readFile","err","content","console","log","authorize","JSON","parse","listLabels","credentials","callback","installed","client_secret","client_id","redirect_uris","oAuth2Client","auth","OAuth2","token","getNewToken","setCredentials","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","process","stdin","output","stdout","question","code","close","getToken","error","writeFile","stringify","gmail","version","users","labels","list","userId","res","data","length","forEach","label","name","AdminPage","mdp","prompt","m","c","i","charCodeAt"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Title from '../Title/Title'\r\n\r\n// Ajout à faire\r\n// Rendre plus joli avec Bootstrap\r\n// NoSql -> créer API pour ça\r\n// Barre de chargement objectif argent\r\n// Page d'admin\r\n// Ajout de contact\r\n// Page de rappel d'event peut être cool aussi\r\n// Attendre le logo pour l'ajouter\r\n\r\nconst fs = require('fs');\r\nconst readline = require('readline');\r\nconst { google } = require('googleapis');\r\n\r\n// If modifying these scopes, delete token.json.\r\nconst SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];\r\n// The file token.json stores the user's access and refresh tokens, and is\r\n// created automatically when the authorization flow completes for the first\r\n// time.\r\nconst TOKEN_PATH = 'token.json';\r\n\r\n// Load client secrets from a local file.\r\nfs.readFile('credentials.json', (err, content) => {\r\n  if (err) return console.log('Error loading client secret file:', err);\r\n  // Authorize a client with credentials, then call the Gmail API.\r\n  authorize(JSON.parse(content), listLabels);\r\n});\r\n\r\n/**\r\n * Create an OAuth2 client with the given credentials, and then execute the\r\n * given callback function.\r\n * @param {Object} credentials The authorization client credentials.\r\n * @param {function} callback The callback to call with the authorized client.\r\n */\r\nfunction authorize(credentials, callback) {\r\n  const { client_secret, client_id, redirect_uris } = credentials.installed;\r\n  const oAuth2Client = new google.auth.OAuth2(\r\n    client_id, client_secret, redirect_uris[0]);\r\n\r\n  // Check if we have previously stored a token.\r\n  fs.readFile(TOKEN_PATH, (err, token) => {\r\n    if (err) return getNewToken(oAuth2Client, callback);\r\n    oAuth2Client.setCredentials(JSON.parse(token));\r\n    callback(oAuth2Client);\r\n  });\r\n}\r\n\r\n/**\r\n * Get and store new token after prompting for user authorization, and then\r\n * execute the given callback with the authorized OAuth2 client.\r\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\r\n * @param {getEventsCallback} callback The callback for the authorized client.\r\n */\r\nfunction getNewToken(oAuth2Client, callback) {\r\n  const authUrl = oAuth2Client.generateAuthUrl({\r\n    access_type: 'offline',\r\n    scope: SCOPES,\r\n  });\r\n  console.log('Authorize this app by visiting this url:', authUrl);\r\n  const rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n  });\r\n  rl.question('Enter the code from that page here: ', (code) => {\r\n    rl.close();\r\n    oAuth2Client.getToken(code, (err, token) => {\r\n      if (err) return console.error('Error retrieving access token', err);\r\n      oAuth2Client.setCredentials(token);\r\n      // Store the token to disk for later program executions\r\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\r\n        if (err) return console.error(err);\r\n        console.log('Token stored to', TOKEN_PATH);\r\n      });\r\n      callback(oAuth2Client);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Lists the labels in the user's account.\r\n *\r\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\r\n */\r\nfunction listLabels(auth) {\r\n  const gmail = google.gmail({ version: 'v1', auth });\r\n  gmail.users.labels.list({\r\n    userId: 'me',\r\n  }, (err, res) => {\r\n    if (err) return console.log('The API returned an error: ' + err);\r\n    const labels = res.data.labels;\r\n    if (labels.length) {\r\n      console.log('Labels:');\r\n      labels.forEach((label) => {\r\n        console.log(`- ${label.name}`);\r\n      });\r\n    } else {\r\n      console.log('No labels found.');\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction AdminPage() {\r\n\r\n  //Flemme de faire un vrai Hash et de toute façon pas sûr que les scouts sachent hack ça :p\r\n  var mdp = \"\"\r\n  mdp = prompt(\"Veuillez indiquer le mot de passe : \")\r\n  var m = 1187 //Hash de vérif du code\r\n  var c = 0\r\n  for (var i = 0; i < mdp.length; i++) {\r\n    c += mdp.charCodeAt(i)\r\n  }\r\n  if (m !== c) {\r\n    return (<Redirect to='/' />)\r\n  }\r\n  return (\r\n    <div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"text-center col-12 mt-4 \">\r\n          <Title>Admin</Title>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"text-center col-12\">\r\n          <Link class=\"mr-2 btn btn-outline-dark\" to=\"/\">Leurs heures</Link>\r\n          <Link class=\"mr-2 btn btn-outline-dark\" to=\"oldJobs\">Nos travaux passés</Link>\r\n          <Link class=\"mr-2 btn btn-outline-dark\" to=\"futureJobs\">Nos travaux futurs</Link>\r\n          <Link class=\"btn btn-outline-dark\" to=\"projet\">Nos projets</Link>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <p>Ici il y aura deux trois trucs que les pi's n'ont pas besoin de voir.</p>\r\n      <p>Je vais tenter par exemple de mettre en place l'API de Trello pour l'avoir ici, et d'autres choses du genre.</p>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdminPage;\r\n"]},"metadata":{},"sourceType":"module"}