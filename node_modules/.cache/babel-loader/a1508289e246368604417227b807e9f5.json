{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\natha\\\\Desktop\\\\Travail_pi's\\\\pi-s_webapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\natha\\\\Desktop\\\\Travail_pi's\\\\pi-s_webapp\\\\src\\\\components\\\\AdminPage\\\\Forms\\\\Hours\\\\Hours.container.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Hours from './Hours';\n\nclass HoursContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pis: [],\n      pi: {\n        _id: \"\",\n        prenom: \"\",\n        nom: \"\",\n        totem: \"\",\n        timing: \"\"\n      }\n    };\n    this.setExistingItemText = this.setExistingItemText.bind(this);\n    this.updateItem = this.updateItem.bind(this);\n  }\n\n  render() {\n    console.log(\"render:\", this.state.pis);\n    return React.createElement(Hours, {\n      pis: this.state.pis,\n      pi: this.state.pi,\n      setExistingItemText: this.setExistingItemText,\n      updateItem: this.updateItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  }\n\n  async componentDidMount() {\n    this.loadItems();\n  }\n\n  loadItems() {\n    fetch('/api/users/listeUser').then(response => response.json()).then(data => {\n      if (data.error) return alert(\"Error:\" + data.error);\n      this.setState({\n        pis: data\n      });\n    }).catch(err => console.error(\"[HoursContainer] Error when fetching users:\", err));\n  }\n\n  setExistingItemText(itemId, newValue) {\n    console.log(\"HoursContainer::setExistingItemText\", itemId, newValue);\n\n    this._updateItemProperties(itemId, {\n      timing: newValue\n    });\n  }\n\n  _updateItemProperties(itemId, newProperties) {\n    //using https://github.com/immerjs/immer would be much more easier\n    const newItems = pis.map(item => {\n      if (item._id !== itemId) return item; // this is not the item we care about, return unchanged\n\n      return _objectSpread({}, item, {}, newProperties);\n    });\n    this.setState({\n      items: newItems\n    });\n    console.log(\"current\", current);\n  }\n\n  async updateItem(item_id) {\n    console.log(\"test   \", item_id); // retrieve the item in the state based on the id\n\n    const indexFound = this.state.pis.find(item => item._id === item_id);\n    console.log(indexFound.hours);\n\n    try {\n      console.log(\"GalleryContainer::updateItem :\", item_id);\n      const response = await fetch(\"/api/users/hours\", {\n        method: \"POST\",\n        body: JSON.stringify(indexFound),\n        // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const result = await response.json();\n      if (result.error) return alert(\"Error:\" + result.error);\n    } catch (err) {\n      console.error(\"updateItem : Error when fetching gallery API :\", err);\n      alert(\"Your item has not been updated in the DB. Error when contacting the API : \" + err);\n    }\n  }\n\n}\n\nexport default HoursContainer;","map":{"version":3,"sources":["C:\\Users\\natha\\Desktop\\Travail_pi's\\pi-s_webapp\\src\\components\\AdminPage\\Forms\\Hours\\Hours.container.jsx"],"names":["React","Hours","HoursContainer","Component","constructor","state","pis","pi","_id","prenom","nom","totem","timing","setExistingItemText","bind","updateItem","render","console","log","componentDidMount","loadItems","fetch","then","response","json","data","error","alert","setState","catch","err","itemId","newValue","_updateItemProperties","newProperties","newItems","map","item","items","current","item_id","indexFound","find","hours","method","body","JSON","stringify","headers","result"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Hours from './Hours'\r\n\r\nclass HoursContainer extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            pis: [],\r\n            pi: {\r\n                _id:\"\",\r\n                prenom: \"\",\r\n                nom: \"\",\r\n                totem: \"\",\r\n                timing: \"\",\r\n            }\r\n        };\r\n\r\n        this.setExistingItemText = this.setExistingItemText.bind(this);\r\n        this.updateItem = this.updateItem.bind(this);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render:\", this.state.pis);\r\n        return (\r\n            <Hours\r\n                pis={this.state.pis}\r\n                pi={this.state.pi}\r\n                setExistingItemText={this.setExistingItemText}\r\n                updateItem={this.updateItem}\r\n            />\r\n        );\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.loadItems();\r\n    }\r\n\r\n    loadItems() {\r\n        fetch('/api/users/listeUser')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.error)\r\n                    return alert(\"Error:\" + data.error);\r\n\r\n                this.setState({ pis: data });\r\n            })\r\n            .catch(err => console.error(\"[HoursContainer] Error when fetching users:\", err));\r\n    }\r\n\r\n    setExistingItemText(itemId, newValue) {\r\n        console.log(\"HoursContainer::setExistingItemText\", itemId, newValue);\r\n        this._updateItemProperties(itemId, {timing: newValue});\r\n    }\r\n\r\n    _updateItemProperties(itemId, newProperties) {\r\n        //using https://github.com/immerjs/immer would be much more easier\r\n        const newItems = pis.map((item) => {\r\n            if (item._id !== itemId) return item; // this is not the item we care about, return unchanged\r\n            return {\r\n                ...item,\r\n                ...newProperties,\r\n            };\r\n        });\r\n        this.setState({items: newItems})\r\n        console.log(\"current\", current)\r\n    }\r\n\r\n    async updateItem(item_id) {\r\n        console.log(\"test   \", item_id)\r\n        // retrieve the item in the state based on the id\r\n        const indexFound = this.state.pis.find(item => \r\n          item._id === item_id\r\n        );\r\n        console.log(indexFound.hours)\r\n        try{\r\n          console.log(\"GalleryContainer::updateItem :\",item_id);\r\n          const response = await fetch(\"/api/users/hours\",{\r\n            method: \"POST\", \r\n            body: JSON.stringify(indexFound), // data can be `string` or {object}!\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }         \r\n            });\r\n          const result = await response.json(); \r\n          if(result.error) \r\n            return alert(\"Error:\" + result.error);\r\n          }\r\n          catch(err){\r\n            console.error(\"updateItem : Error when fetching gallery API :\", err);\r\n            alert(\"Your item has not been updated in the DB. Error when contacting the API : \"+ err);\r\n          }     \r\n        \r\n      }    \r\n}\r\n\r\nexport default HoursContainer;"]},"metadata":{},"sourceType":"module"}