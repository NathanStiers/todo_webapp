{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar remotebuildexecution_v2;\n\n(function (remotebuildexecution_v2) {\n  /**\n   * Remote Build Execution API\n   *\n   * Supplies a Remote Execution API service for tools such as bazel.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const remotebuildexecution = google.remotebuildexecution('v2');\n   *\n   * @namespace remotebuildexecution\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Remotebuildexecution\n   */\n  class Remotebuildexecution {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.actionResults = new Resource$Actionresults(this.context);\n      this.actions = new Resource$Actions(this.context);\n      this.blobs = new Resource$Blobs(this.context);\n      this.operations = new Resource$Operations(this.context);\n      this.v2 = new Resource$V2(this.context);\n    }\n\n  }\n\n  remotebuildexecution_v2.Remotebuildexecution = Remotebuildexecution;\n\n  class Resource$Actionresults {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/actionResults/{hash}/{sizeBytes}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['instanceName', 'hash', 'sizeBytes'],\n        pathParams: ['hash', 'instanceName', 'sizeBytes'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/actionResults/{hash}/{sizeBytes}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['instanceName', 'hash', 'sizeBytes'],\n        pathParams: ['hash', 'instanceName', 'sizeBytes'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$Actionresults = Resource$Actionresults;\n\n  class Resource$Actions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    execute(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/actions:execute').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$Actions = Resource$Actions;\n\n  class Resource$Blobs {\n    constructor(context) {\n      this.context = context;\n    }\n\n    batchRead(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/blobs:batchRead').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/blobs:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    findMissing(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/blobs:findMissing').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getTree(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/blobs/{hash}/{sizeBytes}:getTree').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['instanceName', 'hash', 'sizeBytes'],\n        pathParams: ['hash', 'instanceName', 'sizeBytes'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$Blobs = Resource$Blobs;\n\n  class Resource$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    waitExecution(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}:waitExecution').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$Operations = Resource$Operations;\n\n  class Resource$V2 {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getCapabilities(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/capabilities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$V2 = Resource$V2;\n})(remotebuildexecution_v2 = exports.remotebuildexecution_v2 || (exports.remotebuildexecution_v2 = {}));","map":null,"metadata":{},"sourceType":"script"}