{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\natha\\\\Desktop\\\\Travail_pi's\\\\pi-s_webapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\natha\\\\Desktop\\\\Travail_pi's\\\\pi-s_webapp\\\\src\\\\components\\\\AdminPage\\\\Forms\\\\Hours\\\\Hours.container.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Hours from './Hours';\n\nclass HoursContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pis: [],\n      pi: {\n        prenom: \"\",\n        nom: \"\",\n        totem: \"\",\n        timing: \"\"\n      }\n    };\n    this.setExistingItemText = this.setExistingItemText.bind(this);\n    this.updateItem = this.updateItem.bind(this);\n  }\n\n  render() {\n    console.log(\"render:\", this.state.items);\n    return React.createElement(Hours, {\n      items: this.state.items,\n      formItem: this.state.formItem,\n      setExistingItemText: this.setExistingItemText,\n      updateItem: this.updateItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    });\n  }\n\n  async componentDidMount() {\n    this.loadItems();\n  }\n\n  loadItems() {\n    fetch('/users/listeUser').then(response => response.json()).then(data => {\n      if (data.error) return alert(\"Error:\" + data.error);\n      this.setState({\n        pis: data\n      });\n    }).catch(err => console.error(\"[HoursContainer] Error when fetching users:\", err));\n  }\n\n  setExistingItemText(itemId, newValue) {\n    console.log(\"HoursContainer::setExistingItemText\", itemId, newValue);\n\n    this._updateItemProperties(itemId, {\n      timing: newValue\n    });\n  }\n\n  _updateItemProperties(itemId, newProperties) {\n    //using https://github.com/immerjs/immer would be much more easier\n    const items = this.state.items;\n    const newItems = items.map(item => {\n      if (item._id !== itemId) return item; // this is not the item we care about, return unchanged\n\n      return _objectSpread({}, item, {}, newProperties);\n    });\n    this.setState({\n      items: newItems\n    });\n  }\n\n  async updateItem(item_id) {\n    console.log(\"Make call to API for element with id:\", item_id, \" .Update with\", this.state.items[item_id]); // retrieve the item in the state based on the id\n\n    const indexFound = this.state.items.findIndex(item => {\n      return item._id === item_id;\n    });\n\n    if (indexFound < 0) {\n      return;\n    }\n\n    try {\n      const updatedItems = [...this.state.items];\n      console.log(\"GalleryContainer::updateItem :\", item_id);\n      const response = await fetch(\"/users/hours\", {\n        method: \"PUT\",\n        body: JSON.stringify(updatedItems[indexFound]),\n        // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const result = await response.json();\n      if (result.error) return alert(\"Error:\" + result.error);\n    } catch (err) {\n      console.error(\"updateItem : Error when fetching gallery API :\", err);\n      alert(\"Your item has not been updated in the DB. Error when contacting the API : \" + err);\n    }\n  }\n\n}\n\nexport default HoursContainer;","map":{"version":3,"sources":["C:\\Users\\natha\\Desktop\\Travail_pi's\\pi-s_webapp\\src\\components\\AdminPage\\Forms\\Hours\\Hours.container.jsx"],"names":["React","Hours","HoursContainer","Component","constructor","state","pis","pi","prenom","nom","totem","timing","setExistingItemText","bind","updateItem","render","console","log","items","formItem","componentDidMount","loadItems","fetch","then","response","json","data","error","alert","setState","catch","err","itemId","newValue","_updateItemProperties","newProperties","newItems","map","item","_id","item_id","indexFound","findIndex","updatedItems","method","body","JSON","stringify","headers","result"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Hours from './Hours'\r\n\r\nclass HoursContainer extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            pis: [],\r\n            pi: {\r\n                prenom: \"\",\r\n                nom: \"\",\r\n                totem: \"\",\r\n                timing: \"\",\r\n            }\r\n        };\r\n\r\n        this.setExistingItemText = this.setExistingItemText.bind(this);\r\n        this.updateItem = this.updateItem.bind(this);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render:\", this.state.items);\r\n        return (\r\n            <Hours\r\n                items={this.state.items}\r\n                formItem={this.state.formItem}\r\n                setExistingItemText={this.setExistingItemText}\r\n                updateItem={this.updateItem}\r\n            />\r\n        );\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.loadItems();\r\n    }\r\n\r\n    loadItems() {\r\n        fetch('/users/listeUser')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.error)\r\n                    return alert(\"Error:\" + data.error);\r\n\r\n                this.setState({ pis: data });\r\n            })\r\n            .catch(err => console.error(\"[HoursContainer] Error when fetching users:\", err));\r\n    }\r\n\r\n    setExistingItemText(itemId, newValue) {\r\n        console.log(\"HoursContainer::setExistingItemText\", itemId, newValue);\r\n\r\n        this._updateItemProperties(itemId, {timing: newValue});\r\n    }\r\n\r\n    _updateItemProperties(itemId, newProperties) {\r\n        //using https://github.com/immerjs/immer would be much more easier\r\n        const {items} = this.state;\r\n        const newItems = items.map((item) => {\r\n            if (item._id !== itemId) return item; // this is not the item we care about, return unchanged\r\n            return {\r\n                ...item,\r\n                ...newProperties,\r\n            };\r\n        });\r\n        this.setState({items: newItems})\r\n    }\r\n\r\n    async updateItem(item_id) {\r\n        console.log(\"Make call to API for element with id:\",item_id,\" .Update with\", this.state.items[item_id]);\r\n        // retrieve the item in the state based on the id\r\n        const indexFound = this.state.items.findIndex(item => {\r\n          return item._id === item_id;\r\n        });\r\n    \r\n        if (indexFound < 0) {\r\n          return;\r\n        }\r\n    \r\n        try{\r\n          const updatedItems = [\r\n            ...this.state.items\r\n          ]\r\n          console.log(\"GalleryContainer::updateItem :\",item_id);\r\n          const response = await fetch(\"/users/hours\",{\r\n            method: \"PUT\", \r\n            body: JSON.stringify( updatedItems[indexFound]), // data can be `string` or {object}!\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            }         \r\n            });\r\n          const result = await response.json(); \r\n          if(result.error) \r\n            return alert(\"Error:\" + result.error);\r\n          }\r\n          catch(err){\r\n            console.error(\"updateItem : Error when fetching gallery API :\", err);\r\n            alert(\"Your item has not been updated in the DB. Error when contacting the API : \"+ err);\r\n          }     \r\n        \r\n      }    \r\n}\r\n\r\nexport default HoursContainer;"]},"metadata":{},"sourceType":"module"}