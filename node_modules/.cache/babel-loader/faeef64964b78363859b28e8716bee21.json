{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar indexing_v3;\n\n(function (indexing_v3) {\n  /**\n   * Indexing API\n   *\n   * Notifies Google when your web pages change.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const indexing = google.indexing('v3');\n   *\n   * @namespace indexing\n   * @type {Function}\n   * @version v3\n   * @variation v3\n   * @param {object=} options Options for Indexing\n   */\n  class Indexing {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.urlNotifications = new Resource$Urlnotifications(this.context);\n    }\n\n  }\n\n  indexing_v3.Indexing = Indexing;\n\n  class Resource$Urlnotifications {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://indexing.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/urlNotifications/metadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    publish(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://indexing.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v3/urlNotifications:publish').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  indexing_v3.Resource$Urlnotifications = Resource$Urlnotifications;\n})(indexing_v3 = exports.indexing_v3 || (exports.indexing_v3 = {}));","map":null,"metadata":{},"sourceType":"script"}