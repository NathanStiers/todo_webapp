{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar appengine_v1beta;\n\n(function (appengine_v1beta) {\n  /**\n   * App Engine Admin API\n   *\n   * Provisions and manages developers&#39; App Engine applications.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const appengine = google.appengine('v1beta');\n   *\n   * @namespace appengine\n   * @type {Function}\n   * @version v1beta\n   * @variation v1beta\n   * @param {object=} options Options for Appengine\n   */\n  class Appengine {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.apps = new Resource$Apps(this.context);\n    }\n\n  }\n\n  appengine_v1beta.Appengine = Appengine;\n\n  class Resource$Apps {\n    constructor(context) {\n      this.context = context;\n      this.authorizedCertificates = new Resource$Apps$Authorizedcertificates(this.context);\n      this.authorizedDomains = new Resource$Apps$Authorizeddomains(this.context);\n      this.domainMappings = new Resource$Apps$Domainmappings(this.context);\n      this.firewall = new Resource$Apps$Firewall(this.context);\n      this.locations = new Resource$Apps$Locations(this.context);\n      this.operations = new Resource$Apps$Operations(this.context);\n      this.services = new Resource$Apps$Services(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    repair(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}:repair').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps = Resource$Apps;\n\n  class Resource$Apps$Authorizedcertificates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'authorizedCertificatesId'],\n        pathParams: ['appsId', 'authorizedCertificatesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'authorizedCertificatesId'],\n        pathParams: ['appsId', 'authorizedCertificatesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'authorizedCertificatesId'],\n        pathParams: ['appsId', 'authorizedCertificatesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Authorizedcertificates = Resource$Apps$Authorizedcertificates;\n\n  class Resource$Apps$Authorizeddomains {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/authorizedDomains').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Authorizeddomains = Resource$Apps$Authorizeddomains;\n\n  class Resource$Apps$Domainmappings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'domainMappingsId'],\n        pathParams: ['appsId', 'domainMappingsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'domainMappingsId'],\n        pathParams: ['appsId', 'domainMappingsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'domainMappingsId'],\n        pathParams: ['appsId', 'domainMappingsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Domainmappings = Resource$Apps$Domainmappings;\n\n  class Resource$Apps$Firewall {\n    constructor(context) {\n      this.context = context;\n      this.ingressRules = new Resource$Apps$Firewall$Ingressrules(this.context);\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Firewall = Resource$Apps$Firewall;\n\n  class Resource$Apps$Firewall$Ingressrules {\n    constructor(context) {\n      this.context = context;\n    }\n\n    batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'ingressRulesId'],\n        pathParams: ['appsId', 'ingressRulesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'ingressRulesId'],\n        pathParams: ['appsId', 'ingressRulesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'ingressRulesId'],\n        pathParams: ['appsId', 'ingressRulesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Firewall$Ingressrules = Resource$Apps$Firewall$Ingressrules;\n\n  class Resource$Apps$Locations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'locationsId'],\n        pathParams: ['appsId', 'locationsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Locations = Resource$Apps$Locations;\n\n  class Resource$Apps$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'operationsId'],\n        pathParams: ['appsId', 'operationsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Operations = Resource$Apps$Operations;\n\n  class Resource$Apps$Services {\n    constructor(context) {\n      this.context = context;\n      this.versions = new Resource$Apps$Services$Versions(this.context);\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Services = Resource$Apps$Services;\n\n  class Resource$Apps$Services$Versions {\n    constructor(context) {\n      this.context = context;\n      this.instances = new Resource$Apps$Services$Versions$Instances(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId'],\n        pathParams: ['appsId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId'],\n        pathParams: ['appsId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId'],\n        pathParams: ['appsId', 'servicesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId'],\n        pathParams: ['appsId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Services$Versions = Resource$Apps$Services$Versions;\n\n  class Resource$Apps$Services$Versions$Instances {\n    constructor(context) {\n      this.context = context;\n    }\n\n    debug(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n        pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n        pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n        pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'servicesId', 'versionsId'],\n        pathParams: ['appsId', 'servicesId', 'versionsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1beta.Resource$Apps$Services$Versions$Instances = Resource$Apps$Services$Versions$Instances;\n})(appengine_v1beta = exports.appengine_v1beta || (exports.appengine_v1beta = {}));","map":null,"metadata":{},"sourceType":"script"}